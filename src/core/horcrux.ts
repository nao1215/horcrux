/**
 * Horcrux data structures and types
 * Defines the format and metadata for Horcrux files
 */

import type { Share } from './shamir/shamir';

/**
 * Header information stored in each Horcrux
 */
export interface HorcruxHeader {
  /** Original filename */
  originalFilename: string;

  /** Creation timestamp */
  timestamp: number;

  /** This horcrux's index (1-based) */
  index: number;

  /** Total number of horcruxes created */
  total: number;

  /** Minimum number of horcruxes needed to restore */
  threshold: number;

  /** Key fragment from Shamir's Secret Sharing */
  keyFragment: Share;

  /** Version of the Horcrux format */
  version: string;
}

/**
 * Complete Horcrux structure including header and encrypted content
 */
export interface Horcrux {
  /** Header information */
  header: HorcruxHeader;

  /** Encrypted content */
  content: Buffer;
}

/**
 * Options for splitting a file into Horcruxes
 */
export interface SplitOptions {
  /** Total number of horcruxes to create */
  total: number;

  /** Minimum number of horcruxes needed to restore */
  threshold: number;

  /** Optional: Custom output filename pattern */
  outputPattern?: string;
}

/**
 * Options for binding Horcruxes back into original file
 */
export interface BindOptions {
  /** Optional: Override output filename */
  outputFilename?: string;

  /** Optional: Verify integrity after binding */
  verify?: boolean;
}

/**
 * Result of splitting operation
 */
export interface SplitResult {
  /** Array of created horcrux data */
  horcruxes: Horcrux[];

  /** Original file size */
  originalSize: number;

  /** Total size of all horcruxes */
  totalSize: number;
}

/**
 * Result of binding operation
 */
export interface BindResult {
  /** Restored file data */
  data: Buffer;

  /** Original filename from horcrux headers */
  filename: string;

  /** Number of horcruxes used */
  horcruxesUsed: number;
}

/**
 * Current version of the Horcrux format
 */
export const HORCRUX_VERSION = '1.0.0';

/**
 * Magic string to identify Horcrux files
 */
export const HORCRUX_MAGIC = '-- HEADER --';
export const HORCRUX_BODY_MARKER = '-- BODY --';

/**
 * Format the on-disk filename for a horcrux shard.
 * Uses the same token replacement rules as the original CLI implementation
 * so that Node.js and React Native clients stay interoperable.
 * Supported tokens inside `pattern` are `{filename}`, `{index}` and
 * `{total}`. When no pattern is supplied, the library falls back to the
 * canonical `filename_1_of_5.horcrux` form described in the project
 * specification.
 *
 * @param originalFilename The original payload file name (used for `{filename}`).
 * @param index The 1-based shard index written into the file name.
 * @param total Total number of horcruxes created in the split run.
 * @param pattern Optional custom pattern that can include `{filename}`,
 * `{index}` and `{total}` placeholders.
 * @returns A filename that is safe to persist to disk for the given horcrux.
 */
export function formatHorcruxFilename(
  originalFilename: string,
  index: number,
  total: number,
  pattern?: string
): string {
  if (pattern !== undefined && pattern !== '') {
    return pattern
      .replace('{filename}', originalFilename)
      .replace('{index}', index.toString())
      .replace('{total}', total.toString());
  }

  // Default pattern: filename_1_of_5.horcrux
  const baseFilename = originalFilename.replace(/\.[^/.]+$/, '');
  return `${baseFilename}_${index}_of_${total}.horcrux`;
}

/**
 * Parse a horcrux filename that follows the default naming convention.
 * This helper is intentionally strict so that we do not misidentify
 * unrelated files when scanning directories. Only filenames generated by
 * {@link formatHorcruxFilename} without a custom pattern are recognised.
 *
 * @param filename Filename to interpret (e.g. `backup_2_of_5.horcrux`).
 * @returns Basic metadata if the filename matches the default shape, otherwise
 * `null` so callers can safely ignore the file.
 */
export function parseHorcruxFilename(filename: string): {
  originalFilename: string;
  index: number;
  total: number;
} | null {
  // Match pattern: name_index_of_total.horcrux
  const match = filename.match(/^(.+)_(\d+)_of_(\d+)\.horcrux$/);
  if (!match) {
    return null;
  }

  return {
    originalFilename: match[1],
    index: parseInt(match[2], 10),
    total: parseInt(match[3], 10)
  };
}

/**
 * Serialise a horcrux header to the JSON format defined in the library
 * specification. The resulting string embeds the Shamir share as a plain
 * object so it can be stored alongside the encrypted payload inside the
 * `.horcrux` file.
 *
 * @param header Structured header information produced during the split run.
 * @returns A human-readable JSON string that can be written to disk.
 */
export function serializeHeader(header: HorcruxHeader): string {
  return JSON.stringify(
    {
      originalFilename: header.originalFilename,
      timestamp: header.timestamp,
      index: header.index,
      total: header.total,
      threshold: header.threshold,
      keyFragment: {
        x: header.keyFragment.x,
        y: Array.from(header.keyFragment.y)
      },
      version: header.version
    },
    null,
    2
  );
}

/**
 * Deserialize a JSON-encoded horcrux header back into strongly typed data.
 * This routine keeps backward compatibility by defaulting the version field
 * to {@link HORCRUX_VERSION} when older files omit it.
 *
 * @param json Raw JSON text previously produced by {@link serializeHeader} or
 * a compatible implementation.
 * @returns A {@link HorcruxHeader} instance ready for validation and binding.
 */
export function deserializeHeader(json: string): HorcruxHeader {
  const parsed = JSON.parse(json) as {
    originalFilename: string;
    timestamp: number;
    index: number;
    total: number;
    threshold: number;
    keyFragment: {
      x: number;
      y: number[];
    };
    version?: string;
  };

  return {
    originalFilename: parsed.originalFilename,
    timestamp: parsed.timestamp,
    index: parsed.index,
    total: parsed.total,
    threshold: parsed.threshold,
    keyFragment: {
      x: parsed.keyFragment.x,
      y: new Uint8Array(parsed.keyFragment.y)
    },
    version: parsed.version ?? HORCRUX_VERSION
  };
}

/**
 * Build the informational comment placed at the top of every `.horcrux` file.
 * This mirrors the messaging in the reference CLI so that users understand
 * how many shards exist and how to restore them.
 *
 * @param index The current shard index reported to the user (1-based).
 * @param total Total number of shards created during the split operation.
 * @returns A short multi-line comment that can be prepended to the file.
 */
export function createHorcruxComment(index: number, total: number): string {
  return `# THIS IS A HORCRUX FILE (${index} of ${total})
# https://github.com/nao1215/horcrux
#
# To restore the original file, use the 'bind' command
# with at least the threshold number of horcrux files.
#`;
}
